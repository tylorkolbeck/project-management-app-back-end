scalar Date

type Query {
  info: String!
  feed: [Link!]!
  users: [User!]!
  project(projectId: ID!): Project!
  user(userId: ID!): User!
  adminGetUsers: User! # Delete before putting into production
}

type Mutation {
  post(url: String, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  createProject(name: String!, description: String!): Project!
  assignUserToProject(userIdToAssign: ID!, projectId: ID!): User!
  removeSelfFromProject(projectId: ID!): User!
  deleteProject(projectId: ID!): Project!
  createMilestone(
    projectId: ID!
    title: String!
    description: String
    dueDate: Date
  ): Milestone!
  addTaskToMilestone(projectId: ID!, milestoneId: ID!, name: String!): Task!
}

type Milestone {
  id: ID!
  title: String
  createdAt: Date
  description: String
  project: Project
  dueDate: Date
  tasks: [Task]
  creator: User!
}

type Task {
  id: ID!
  createdAt: Date
  name: String!
  description: String
  color: String
  dateCompleted: Date
  priority: String
  sos: Boolean
  assigned: [User]
  creator: User
  dueDate: Date
  milestone: Milestone!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String
  email: String
  links: [Link!]
  projects: [Project!]
  projectsAssigned: [Project!]
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Project {
  id: ID!
  name: String!
  description: String
  owner: User
  assignees: [User!]
  ownerId: User!
  milestones: [Milestone!]
}
